library(faraway)
data("sat")
names(sat)
lm0 <- lm(total ~ expend + salary + ratio + takers, data=sat)
resid <- residuals(lm0)
fit <- fitted(lm0)
plot(resid ~ fit)
?glm
hist(sat$total, freq=FALSE); lines(density(sat$total))
hist(sat$total, freq=FALSE); lines(density(sat$total))
hist(sat$ratio, freq=FALSE); lines(density(sat$ratio))
hist(sat$salary, freq=FALSE); lines(density(sat$salary))
hist(sat$takers, freq=FALSE); lines(density(sat$takers))
hist(sat$verbal, freq=FALSE); lines(density(sat$verbal))
hist(sat$math, freq=FALSE); lines(density(sat$math))
hist(sat$total, freq=FALSE); lines(density(sat$total))
hist(sat$ratio, freq=FALSE); lines(density(sat$ratio))
hist(sat$salary, freq=FALSE); lines(density(sat$salary))
hist(sat$takers, freq=FALSE); lines(density(sat$takers))
hist(sat$verbal, freq=FALSE); lines(density(sat$verbal))
hist(sat$math, freq=FALSE); lines(density(sat$math))
hist(sat$math, freq=FALSE); lines(density(sat$math))
hist(sat$verbal, freq=FALSE); lines(density(sat$verbal))
hist(sat$takers, freq=FALSE); lines(density(sat$takers))
setwd("C:/Users/Tomas/Documents/StatSci/Linear_models/project")
unzip("DVC_SCOTLAND_ESRI.zip")
unzip("DCD_SCOTLAND_ESRI.zip")
library(rgdal)
deer <- readOGR("DVC_SCOTLAND.shp", layer="DVC_SCOTLAND")
deer_counts <- readOGR("DCD_SCOTLAND.shp", layer="DCD_SCOTLAND")
plot(deer_counts)
plot(deer)
setwd("C:/Users/Tomas/Documents/LEI/Afripol/TZA/2012 Wards Shapefiles")
library(rgdal)
ogrListLayers("TZwards.shp")
TZA <- readOGR("TZwards.shp", layer="TZwards")
"LANG'ATA" %in% toupper(TZA@data$Ward_Name)
"NG'APA" %in% toupper(TZA@data$Ward_Name)
TZA@data[TZA@data$District_N %in% "Kilwa",]
"LIWALE 'B'" %in% toupper(TZA@data$Ward_Name)
"NANG'ONDO" %in% toupper(TZA@data$Ward_Name)
TZA@data[TZA@data$District_N %in% "NACHINGWEA",]
TZA@data[toupper(TZA@data$District_N) %in% "NACHINGWEA",]
TZA@data[toupper(TZA@data$District_N) %in% "SIMANJIRO",]
TZA@data[toupper(TZA@data$District_N) %in% "NYAMANG'UTA",]
"NYAMANG'UTA" %in% toupper(TZA@data$Ward_Name)
"KYANG'OMBE" %in% toupper(TZA@data$Ward_Name)
"RING'WANI" %in% toupper(TZA@data$Ward_Name)
"RUNG'ABURE" %in% toupper(TZA@data$Ward_Name)
"GORONG'AA" %in% toupper(TZA@data$Ward_Name)
TZA@data[toupper(TZA@data$District_N) %in% "TARIME",]
"NKUNG'UNGU" %in% toupper(TZA@data$Ward_Name)
TZA@data[toupper(TZA@data$District_N) %in% "CHUNYE",]
TZA@data[toupper(TZA@data$District_N) %in% "CHUNYA",]
rm(list=ls())
# -------------------------------------
# read in ward and constituency link
# table from the NBS 2015
setwd("C:/Users/Tomas/Documents/LEI/Afripol/TZA/data")
# use regex to order the information the way
# that you want
x <- readLines("MAJIMBO NA KATA 2015 FINAL.txt")
x2 <- gsub("(?<=[a-zA-Z])(\\s|\\s{2})(?=[a-zA-Z])", "-", x, perl=TRUE)
x3 <- gsub("(?<=\\d)(\\s{0,})(?!\\w)", "", x2, perl=TRUE)
x4 <- gsub("(\\s)(?!\\w)", "", x3, perl=TRUE)
x5 <- gsub("(?<!\\w)(\\s)", "", x4, perl = TRUE)
# select on length of resulting strings
list <- lapply(x5, function(elt) strsplit(elt, " "))
s <- sapply(list, function(elt) length(elt[[1]]))
bad <- s %in% 0 | s %in% 1
x6 <- x5[!bad]
# function for filling gaps with NA values
# need to change this for new data
extender <- function(x){
if(length(x) == 3){
x <- c(NA, NA, NA, x)
} else if (length(x)==4){
x <- c(NA, NA, x)
} else if (length(x)==5){
x <- c(NA, x)
}
return(x)
}
# split on whitespace and create a new dataframe
x7 <- strsplit(x6, " ")
x8 <- lapply(x7, function(elt) extender(elt))
# create new dataframe for holdig this information
df <- data.frame(
reg=sapply(x8, function(elt) return(elt[1])),
dis=sapply(x8, function(elt) return(elt[2])),
con=sapply(x8, function(elt) return(elt[3])),
N1=sapply(x8, function(elt) return(elt[4])),
ward=sapply(x8, function(elt) return(elt[5])),
N2=sapply(x8, function(elt) return(elt[6]))
)
# read in filler functions and back fill
# all the values that are NA
source("C:/Users/Tomas/Documents/LEI/Afripol/TZA/code/filler.R")
df$reg <- backer(df$reg)
df$dis <- backer(df$dis)
df$con <- backer(df$con)
# put hyphenated values back to normal
df$reg <- gsub("-", " ", df$reg)
df$dis <- gsub("-", " ", df$dis)
df$con <- gsub("-", " ", df$con)
df$ward <- gsub("-", " ", df$ward)
# get rid of commas and make integers of variables
df$N2 <- gsub(",", "", df$N2)
df$N2 <- as.integer(df$N2)
rm(list=ls()[!ls() %in% "df"])
head(df)
setwd("C:/Users/Tomas/Documents/LEI/Afripol/TZA/2012 Wards Shapefiles")
library(rgdal)
TZA <- readOGR("TZwards.shp", layer="TZwards")
table(toupper(df$ward) %in% toupper(TZA@data$Ward_Name))
unique()plot(TZA)
plot(TZA)
unique(TZA@data$Region_Nam)
islands <- c("Kaskazini Unguja", "Kusini Unguja", "Mjini Magharibi", "Kaskazini Pemba", "Kusini Pemba")
map_wards <- toupper(TZA@data$Ward_Name))[!TZA@data$Region_Nam %in% islands]
map_wards <- toupper(TZA@data$Ward_Name)[!TZA@data$Region_Nam %in% islands]
nrow(TZA@data)
table(toupper(df$ward) %in% toupper(TZA@data$Ward_Name))
table(toupper(df$ward) %in% map_wards
table(toupper(df$ward) %in% map_wards)
islands <- c("Kaskazini Unguja", "Kusini Unguja", "Mjini Magharibi", "Kaskazini Pemba", "Kusini Pemba")
map_wards <- toupper(TZA@data$Ward_Name)[!TZA@data$Region_Nam %in% islands]
table(toupper(df$ward) %in% map_wards)
table(toupper(df$ward) %in% toupper(TZA@data$Ward_Name))
table(map_wards %in% toupper(df$ward))
View(map_wards[!map_wards %in% toupper(df$ward)])
head(map_wards[!map_wards %in% toupper(df$ward)])
nrow(map_wards[!map_wards %in% toupper(df$ward)])
nrow(map_wards[!(map_wards %in% toupper(df$ward))])
length(map_wards[!(map_wards %in% toupper(df$ward))])
map_wards[!(map_wards %in% toupper(df$ward))]
unique(TZA@data$Region_Nam)
islands <- c("Kaskazini Unguja", "Kusini Unguja", "Mjini Magharibi", "Kaskazini Pemba", "Kusini Pemba")
map_data <- TZA@data$Ward_Name[!TZA@data$Region_Nam %in% islands]
map_wards <- toupper(TZA@data$Ward_Name)[!TZA@data$Region_Nam %in% islands]
table(map_wards %in% toupper(df$ward))
map_data[!(map_wards %in% toupper(df$ward))]
map_data <- TZA@data[!TZA@data$Region_Nam %in% islands]
islands <- c("Kaskazini Unguja", "Kusini Unguja", "Mjini Magharibi", "Kaskazini Pemba", "Kusini Pemba")
map_data <- TZA@data[!TZA@data$Region_Nam %in% islands,]
map_wards <- toupper(TZA@data$Ward_Name)[!TZA@data$Region_Nam %in% islands]
table(map_wards %in% toupper(df$ward))
map_data[!(map_wards %in% toupper(df$ward))]
map_data[!(map_wards %in% toupper(df$ward)),]
missing <- map_data[!(map_wards %in% toupper(df$ward)),]
table(missing$Region_Nam)
table(missing$Region_Nam)
table(missing$District_N)
table(missing$Region_Nam)
max(table(missing$Region_Nam))
table(missing$Region_Nam)[max(table(missing$Region_Nam))]
table(missing$Region_Nam)[which.max(table(missing$Region_Nam))]
missing[missing$Region_Nam %in% "Manyara",]
rm(list=ls())
# -------------------------------------
# read in ward and constituency link
# table from the NBS 2015
setwd("C:/Users/Tomas/Documents/LEI/Afripol/TZA/data")
# use regex to order the information the way
# that you want
x <- readLines("MAJIMBO NA KATA 2015 FINAL.txt")
x2 <- gsub("(?<=[a-zA-Z])(\\s|\\s{2})(?=[a-zA-Z])", "-", x, perl=TRUE)
x3 <- gsub("(?<=\\d)(\\s{0,})(?!\\w)", "", x2, perl=TRUE)
x4 <- gsub("(\\s)(?!\\w)", "", x3, perl=TRUE)
x5 <- gsub("(?<!\\w)(\\s)", "", x4, perl = TRUE)
# select on length of resulting strings
list <- lapply(x5, function(elt) strsplit(elt, " "))
s <- sapply(list, function(elt) length(elt[[1]]))
bad <- s %in% 0 | s %in% 1
x6 <- x5[!bad]
# function for filling gaps with NA values
# need to change this for new data
extender <- function(x){
if(length(x) == 3){
x <- c(NA, NA, NA, x)
} else if (length(x)==4){
x <- c(NA, NA, x)
} else if (length(x)==5){
x <- c(NA, x)
}
return(x)
}
# split on whitespace and create a new dataframe
x7 <- strsplit(x6, " ")
x8 <- lapply(x7, function(elt) extender(elt))
# create new dataframe for holdig this information
df <- data.frame(
reg=sapply(x8, function(elt) return(elt[1])),
dis=sapply(x8, function(elt) return(elt[2])),
con=sapply(x8, function(elt) return(elt[3])),
N1=sapply(x8, function(elt) return(elt[4])),
ward=sapply(x8, function(elt) return(elt[5])),
N2=sapply(x8, function(elt) return(elt[6]))
)
# read in filler functions and back fill
# all the values that are NA
source("C:/Users/Tomas/Documents/LEI/Afripol/TZA/code/filler.R")
df$reg <- backer(df$reg)
df$dis <- backer(df$dis)
df$con <- backer(df$con)
# put hyphenated values back to normal
df$reg <- gsub("-", " ", df$reg)
df$dis <- gsub("-", " ", df$dis)
df$con <- gsub("-", " ", df$con)
df$ward <- gsub("-", " ", df$ward)
# get rid of commas and make integers of variables
df$N2 <- gsub(",", "", df$N2)
df$N2 <- as.integer(df$N2)
rm(list=ls()[!ls() %in% "df"])
setwd("C:/Users/Tomas/Documents/LEI/Afripol/TZA/data")
setwd("C:/Users/Tomas/Documents/LEI/Afripol/TZA/2012 Wards Shapefiles")
TZA <- readOGR("TZwards.shp", layer="TZwards")
islands <- c("Kaskazini Unguja", "Kusini Unguja", "Mjini Magharibi", "Kaskazini Pemba", "Kusini Pemba")
map_data <- TZA@data[!TZA@data$Region_Nam %in% islands,]
map_wards <- toupper(TZA@data$Ward_Name)[!TZA@data$Region_Nam %in% islands]
table(map_wards %in% toupper(df$ward))
missing <- map_data[!(map_wards %in% toupper(df$ward)),]
table(missing$Region_Nam)
table(missing$Region_Nam[drop=TRUE])
missing[missing$Region_Nam %in% "Pwani",]
table(missing$Region_Nam[drop=TRUE])
missing[missing$Region_Nam %in% "Katavi",]
table(missing$Region_Nam[drop=TRUE])
sum(table(missing$District_N[drop=TRUE]))
missing[missing$Region_Nam %in% "Pwani",]
missing[missing$Region_Nam %in% "Katavi",]
missing[missing$Region_Nam %in% "Njombe",]
missing[missing$Region_Nam %in% "Pwani",]
missing[missing$Region_Nam %in% "Njombe",]
missing[missing$Region_Nam %in% "Dar-es-salaam",]
missing[missing$Region_Nam %in% "Dodoma",]
missing[missing$Region_Nam %in% "Geita",]
missing[missing$Region_Nam %in% "Iringa",]
missing[missing$Region_Nam %in% "Shinyanga",]
missing[missing$Region_Nam %in% "Simiyu",]
missing[missing$Region_Nam %in% "Singida",]
missing[missing$Region_Nam %in% "Njombe",]
table(missing$Region_Nam[drop=TRUE])
table(missing$District_N[drop=TRUE])
table(missing$Region_Nam[drop=TRUE])
