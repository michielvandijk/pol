binary <- read.csv("http://www.ats.ucla.edu/stat/data/binary.csv")
binary$admit <- factor(binary$admit, labels=c("rejected", "admitted"))
library(metricsgraphics)
plots <- lapply(c("rejected", "admitted"), function(elt){
mjs_plot(data=subset(binary, admit %in% elt), x=gpa) %>%
mjs_histogram() %>%
mjs_labs(x_label=sprintf("Plot for %d", elt))
})
plots <- lapply(c("rejected", "admitted"), function(elt){
mjs_plot(data=subset(binary, admit %in% elt), x=gpa) %>%
mjs_histogram() %>%
mjs_labs(x_label=sprintf("Plot for %s", elt))
})
str(plots)
plots[[1]]
mjs_grid(plots, nrow=4, ncol=3, widths=c(rep(0.33, 3)))
?mjs_grid
install.packages("htmltools")
library(htmltools)
?div
show_plot <- function(plot_object, title) {
div(style="margin:auto;text-align:center", strong(title), br(), plot_object)
}
plots <- lapply(c("rejected", "admitted"), function(elt){
mjs_plot(data=subset(binary, admit %in% elt), x=gpa, width="400px", height="250px") %>%
mjs_histogram() %>%
show_plot(elt)
# mjs_labs(x_label=sprintf("Plot for %s", elt))
})
mjs_grid(plots, nrow=1, ncol=2, widths=0.33)
?mjs_historgram
?mjs_histogram
?mjs_labs
binary <- read.csv("http://www.ats.ucla.edu/stat/data/binary.csv")
x <- matrix(binary$gpa, ncol=1)
y <- matrix(binary$admit, ncol=1)
loglik <- function(beta, x, y){
p <- exp(x %*% beta)/(1 + exp(x %*% beta))
t(y) %*% log(p) + t(1-y) %*% log(1-p)
}
logit <- glm(admit ~ gpa, family=binomial(link = "logit"), data=binary)
summary(logit)
logit2 <- glm(admit ~ 0 + gpa, family=binomial(link = "logit"), data=binary)
summary(logit2)
beta2 <- matrix(coef(logit2), ncol=1)
AIC <- 2 * length(coef(logit)) - 2*loglik(beta2, x, y)
AIC <- 2 * length(coef(logit2)) - 2*loglik(beta2, x, y)
AIC(logit2)
x <- cbind(1, x)
beta1 <- matrix(coef(logit), ncol=1)
AIC1 <- 2 * length(coef(logit)) - 2*loglik(coef(logit), x, y)
AIC(logit)
# -------------------------------------
# read in ward and constituency link
# table from the NBS 2015
setwd("C:/Users/Tomas/Documents/LEI/Afripol/TZA/data")
# use regex to order the information the way
# that you want
x <- readLines("MAJIMBO NA KATA 2015 FINAL.txt")
x2 <- gsub("(?<=[a-zA-Z])(\\s|\\s{2})(?=[a-zA-Z])", "-", x, perl=TRUE)
x3 <- gsub("(?<=\\d)(\\s{0,})(?!\\w)", "", x2, perl=TRUE)
x4 <- gsub("(\\s)(?!\\w)", "", x3, perl=TRUE)
x5 <- gsub("(?<!\\w)(\\s)", "", x4, perl = TRUE)
# select on length of resulting strings
list <- lapply(x5, function(elt) strsplit(elt, " "))
s <- sapply(list, function(elt) length(elt[[1]]))
bad <- s %in% 0 | s %in% 1
x6 <- x5[!bad]
# function for filling gaps with NA values
# need to change this for new data
extender <- function(x){
if(length(x) == 3){
x <- c(NA, NA, NA, x)
} else if (length(x)==4){
x <- c(NA, NA, x)
} else if (length(x)==5){
x <- c(NA, x)
}
return(x)
}
# split on whitespace and create a new dataframe
x7 <- strsplit(x6, " ")
x8 <- lapply(x7, function(elt) extender(elt))
# create new dataframe for holdig this information
df <- data.frame(
reg=sapply(x8, function(elt) return(elt[1])),
dis=sapply(x8, function(elt) return(elt[2])),
con=sapply(x8, function(elt) return(elt[3])),
N1=sapply(x8, function(elt) return(elt[4])),
ward=sapply(x8, function(elt) return(elt[5])),
N2=sapply(x8, function(elt) return(elt[6]))
)
# read in filler functions and back fill
# all the values that are NA
source("C:/Users/Tomas/Documents/LEI/Afripol/TZA/code/filler.R")
df$reg <- backer(df$reg)
df$dis <- backer(df$dis)
df$con <- backer(df$con)
# put hyphenated values back to normal
df$reg <- gsub("-", " ", df$reg)
df$dis <- gsub("-", " ", df$dis)
df$con <- gsub("-", " ", df$con)
df$ward <- gsub("-", " ", df$ward)
# get rid of commas and make integers of variables
df$N2 <- gsub(",", "", df$N2)
df$N2 <- as.integer(df$N2)
rm(list=ls()[!ls() %in% "df"])
setwd("C:/Users/Tomas/Documents/LEI/pol/data/2012 Wards Shapefiles")
library(rgdal)
ogrListLayers("TZwards.shp")
TZA <- readOGR("TZwards.shp", layer="TZwards")
islands <- c("Kaskazini Unguja", "Kusini Unguja", "Mjini Magharibi", "Kaskazini Pemba", "Kusini Pemba")
map_data <- TZA@data[!TZA@data$Region_Nam %in% islands,]
map_wards <- toupper(TZA@data$Ward_Name)[!TZA@data$Region_Nam %in% islands]
table(map_wards %in% toupper(df$ward))
missing <- map_data[!(map_wards %in% toupper(df$ward)),]
table(missing$Region_Nam[drop=TRUE])
table(missing$District_N[drop=TRUE])
missing[missing$Region_Nam %in% "Pwani",]
missing[missing$Region_Nam %in% "Katavi",]
unique(df$con)
missing[missing$Region_Nam %in% "Katavi",]
missing[missing$Region_Nam %in% "Njombe",]
missing[missing$Region_Nam %in% "Dar-es-salaam",]
wards <- toupper(TZA@data$Ward_Name)
"MABWE BANDE" %in% wards
missing[missing$Region_Nam %in% "Dodoma",]
"HOMBOLO MAKULU" %in% wards
"HOMBOLO MAIRO" %in% wards
"HOMBOLOMAIRO" %in% wards
"HOMBOLO" %in% wards
missing[missing$Region_Nam %in% "Dodoma",]
missing[missing$Region_Nam %in% "Geita",]
"KAKORA" %in% wards
"NGEMO" %in% wards
"NHOMOLWA" %in% wards
missing[missing$Region_Nam %in% "Iringa",]
rm(list=ls())
# -------------------------------------
# read in ward and constituency link
# table from the NBS 2015
setwd("C:/Users/Tomas/Documents/LEI/Afripol/TZA/data")
# use regex to order the information the way
# that you want
x <- readLines("MAJIMBO NA KATA 2015 FINAL.txt")
x2 <- gsub("(?<=[a-zA-Z])(\\s|\\s{2})(?=[a-zA-Z])", "-", x, perl=TRUE)
x3 <- gsub("(?<=\\d)(\\s{0,})(?!\\w)", "", x2, perl=TRUE)
x4 <- gsub("(\\s)(?!\\w)", "", x3, perl=TRUE)
x5 <- gsub("(?<!\\w)(\\s)", "", x4, perl = TRUE)
# select on length of resulting strings
list <- lapply(x5, function(elt) strsplit(elt, " "))
s <- sapply(list, function(elt) length(elt[[1]]))
bad <- s %in% 0 | s %in% 1
x6 <- x5[!bad]
# function for filling gaps with NA values
# need to change this for new data
extender <- function(x){
if(length(x) == 3){
x <- c(NA, NA, NA, x)
} else if (length(x)==4){
x <- c(NA, NA, x)
} else if (length(x)==5){
x <- c(NA, x)
}
return(x)
}
# split on whitespace and create a new dataframe
x7 <- strsplit(x6, " ")
x8 <- lapply(x7, function(elt) extender(elt))
# create new dataframe for holdig this information
df <- data.frame(
reg=sapply(x8, function(elt) return(elt[1])),
dis=sapply(x8, function(elt) return(elt[2])),
con=sapply(x8, function(elt) return(elt[3])),
N1=sapply(x8, function(elt) return(elt[4])),
ward=sapply(x8, function(elt) return(elt[5])),
N2=sapply(x8, function(elt) return(elt[6]))
)
# read in filler functions and back fill
# all the values that are NA
source("C:/Users/Tomas/Documents/LEI/Afripol/TZA/code/filler.R")
df$reg <- backer(df$reg)
df$dis <- backer(df$dis)
df$con <- backer(df$con)
# put hyphenated values back to normal
df$reg <- gsub("-", " ", df$reg)
df$dis <- gsub("-", " ", df$dis)
df$con <- gsub("-", " ", df$con)
df$ward <- gsub("-", " ", df$ward)
# get rid of commas and make integers of variables
df$N2 <- gsub(",", "", df$N2)
df$N2 <- as.integer(df$N2)
rm(list=ls()[!ls() %in% "df"])
setwd("C:/Users/Tomas/Documents/LEI/pol/data/2012 Wards Shapefiles")
library(rgdal)
TZA <- readOGR("TZwards.shp", layer="TZwards")
islands <- c("Kaskazini Unguja", "Kusini Unguja", "Mjini Magharibi", "Kaskazini Pemba", "Kusini Pemba")
map_data <- TZA@data[!TZA@data$Region_Nam %in% islands,]
map_wards <- toupper(TZA@data$Ward_Name)[!TZA@data$Region_Nam %in% islands]
table(map_wards %in% toupper(df$ward))
missing <- map_data[!(map_wards %in% toupper(df$ward)),]
table(missing$Region_Nam[drop=TRUE])
setwd("C:/Users/Tomas/Documents/LEI/pol/data")
# -------------------------------------
# read in ward and constituency link
# table from the NBS 2015
setwd("C:/Users/Tomas/Documents/LEI/pol/data")
# use regex to order the information the way
# that you want
x <- readLines("MAJIMBO NA KATA 2015 FINAL.txt")
x2 <- gsub("(?<=[a-zA-Z])(\\s|\\s{2})(?=[a-zA-Z])", "-", x, perl=TRUE)
x3 <- gsub("(?<=\\d)(\\s{0,})(?!\\w)", "", x2, perl=TRUE)
x4 <- gsub("(\\s)(?!\\w)", "", x3, perl=TRUE)
x5 <- gsub("(?<!\\w)(\\s)", "", x4, perl = TRUE)
# select on length of resulting strings
list <- lapply(x5, function(elt) strsplit(elt, " "))
s <- sapply(list, function(elt) length(elt[[1]]))
bad <- s %in% 0 | s %in% 1
x6 <- x5[!bad]
# function for filling gaps with NA values
# need to change this for new data
extender <- function(x){
if(length(x) == 3){
x <- c(NA, NA, NA, x)
} else if (length(x)==4){
x <- c(NA, NA, x)
} else if (length(x)==5){
x <- c(NA, x)
}
return(x)
}
# split on whitespace and create a new dataframe
x7 <- strsplit(x6, " ")
x8 <- lapply(x7, function(elt) extender(elt))
# create new dataframe for holdig this information
df <- data.frame(
reg=sapply(x8, function(elt) return(elt[1])),
dis=sapply(x8, function(elt) return(elt[2])),
con=sapply(x8, function(elt) return(elt[3])),
N1=sapply(x8, function(elt) return(elt[4])),
ward=sapply(x8, function(elt) return(elt[5])),
N2=sapply(x8, function(elt) return(elt[6]))
)
# read in filler functions and back fill
# all the values that are NA
source("C:/Users/Tomas/Documents/LEI/Afripol/TZA/code/filler.R")
df$reg <- backer(df$reg)
df$dis <- backer(df$dis)
df$con <- backer(df$con)
# put hyphenated values back to normal
df$reg <- gsub("-", " ", df$reg)
df$dis <- gsub("-", " ", df$dis)
df$con <- gsub("-", " ", df$con)
df$ward <- gsub("-", " ", df$ward)
# get rid of commas and make integers of variables
df$N2 <- gsub(",", "", df$N2)
df$N2 <- as.integer(df$N2)
rm(list=ls()[!ls() %in% "df"])
setwd("C:/Users/Tomas/Documents/LEI/pol/data/2012 Wards Shapefiles")
TZA <- readOGR("TZwards.shp", layer="TZwards")
islands <- c("Kaskazini Unguja", "Kusini Unguja", "Mjini Magharibi", "Kaskazini Pemba", "Kusini Pemba")
map_data <- TZA@data[!TZA@data$Region_Nam %in% islands,]
map_wards <- toupper(TZA@data$Ward_Name)[!TZA@data$Region_Nam %in% islands]
table(map_wards %in% toupper(df$ward))
missing <- map_data[!(map_wards %in% toupper(df$ward)),]
table(missing$Region_Nam[drop=TRUE])
table(missing$Region_Nam)
missing[missing$Region_Nam %in% "Pwani",]
missing[missing$Region_Nam %in% "Katavi",]
missing[missing$Region_Nam %in% "Njombe",]
missing[missing$Region_Nam %in% "Dar-es-salaam",]
missing[missing$Region_Nam %in% "Dodoma",]
missing[missing$Region_Nam %in% "Geita",]
