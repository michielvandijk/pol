sqrt(e$val[1]/e$val
sqrt(e$val[1]/e$val)
summary(lm(x[,1] ~ x[,-1]))$r.squared
1/(1-0.99262)
vif(x)
sqrt(1788)
cor(x[,-c(3,4)])
summary(lm(Employed ~ Armed.Forces + Unemployed + Year,longley))
x <- as.matrix(cbind(1,longley[,-7]))
solve(t(x) %*% x) %*% t(x) %*% longley[,7]
solve(t(x) %*% x , t(x) %*% longley$Emp, tol = 1e-12)
data("divusa")
lm0 <- lm(divorce ~ unemployed + femlab + marriage + birth + military)
lm0 <- lm(divorce ~ unemployed + femlab + marriage + birth + military, data=divusa)
names(divusa)
x <- as.matrix(divusa[,-2])
e <- eigen(t(x) %*% x)
e$val
sqrt(e$val[1]/e$val)
vif(lm0)
summary(lm0)
summary(lm(divorce ~ femlab + marriage + birth , data=divusa))
newPow <- function(n, d, alpha){
B <- 500
sigma <- 1
m <- matrix(nrow=B, ncol=n)
m <- apply(m, 1, function(elt) rnorm(n, d, sqrt(2 * sigma^2)))
mus <- apply(m, 2, function(elt) mean(elt)/sqrt(var(elt)/n))
sum(abs(mus) > qt(1 - alpha/2, n - 1)) / length(mus)
}
getter <- function(pow, d, alpha){
x <- 0
n <- 2
while(x <= pow){
x <- newPow(n, d, alpha)
n <- n + 1
}
n
}
m <- matrix(nrow=2, ncol=3)
d <- c(0.2, 0.5, 0.8)
p <- c(0.8, 0.9)
system.time(
set.seed(4444)
for(i in 1:3){
for(j in 1:2){
m[j, i] <- getter(p[j], d[i], alpha=0.05)
}
}
)
system.time(
set.seed(4444)
for(i in 1:3){
for(j in 1:2){
m[j, i] <- getter(p[j], d[i], alpha=0.05)
}
}
system.time(
# set.seed(4444)
for(i in 1:3){
for(j in 1:2){
m[j, i] <- getter(p[j], d[i], alpha=0.05)
}
}
)
m
newPow <- function(n, d, alpha){
B <- 500
sigma <- 1
m <- matrix(nrow=B, ncol=n)
m <- apply(m, 1, function(elt) rnorm(n, d, sqrt(2 * sigma^2)))
mus <- apply(m, 2, function(elt) mean(elt)/sqrt(var(elt)/n))
sum(abs(mus) > qt(1 - alpha/2, n - 1)) / length(mus)
}
getter <- function(pow, d, alpha){
x <- 0
n <- 2
while(x <= pow){
x <- newPow(n, d, alpha)
n <- n + 1
}
n
}
m <- matrix(nrow=2, ncol=3)
d <- c(0.2, 0.5, 0.8)
p <- c(0.8, 0.9)
# set.seed(4444)
for(i in 1:3){
for(j in 1:2){
m[j, i] <- getter(p[j], d[i], alpha=0.05)
cat("for a power of ", p[j], " and a Cohen's d of ", d[i], "the sample size needs to be at least ", m[j,i])
}
}
for(i in 1:3){
for(j in 1:2){
m[j, i] <- getter(p[j], d[i], alpha=0.05)
cat("for a power of", p[j], "and a Cohen's d of", d[i], "the sample size needs to be at least", m[j,i], "\n")
}
}
pwr.t.test(power=0.8, d=0.2, sig.level=0.05)
library(pwr)
pwr.t.test(power=0.8, d=0.2, sig.level=0.05)
pwr.t.test(power=0.9, d=0.2, sig.level=0.05)
pwr.t.test(power=0.8, d=0.5, sig.level=0.05)
set.seed(4444)
for(i in 1:3){
for(j in 1:2){
m[j, i] <- getter(p[j], d[i], alpha=0.05)
cat("for a power of", p[j], "and a Cohen's d of", d[i], "the sample size needs to be at least", m[j,i], "\n")
}
}
set.seed(4444)
n <- m <- 64
reject <- 0
B <- 1e4
for (i in 1:B){
r1 <- rnorm(n, 3, 1)
r2 <- rnorm(m, 2.5, 1)
mu1 <- mean(r1)
mu2 <- mean(r2)
s1 <- (1/(n-1)) * sum((r1-mu1)^2)
s2 <- (1/(m-1)) * sum((r2-mu2)^2)
S <- sqrt(((n-1)*s1 + (m-1)*s2)/(n + m - 2))
reject <- reject + (abs(mu1 - mu2)/(S*sqrt(2/m)) > qt(0.975, n + m - 2 ))
}
reject/B
pwr.t.test(n=64, d=0.5, sig.level=0.05, type="two.sample", alternative="two.sided")
library(pwr)
pwr.t.test(n=64, d=0.5, sig.level=0.05, type="two.sample", alternative="two.sided")
set.seed(4444)
n.min <- function(d, p) {
power <- function(n) {
for(i in 1:1000){
A <- rnorm(n, 3, 1)
B <- rnorm(n, 3 - d, 1)
s <- sqrt(((n - 1) * var(A) + (n - 1) * var(B)) / (n + n - 2))
T[i] <- d / (s * (sqrt(2 / n)))
power <- mean(abs(T) > qt(0.975, n + n - 2))
}
power
}
p0 <- 0
n <- 2
while(p0 < p) {
p0 <- power(n)
n <- n + 1
}
n.min <- print(n)
}
n.min(0.8, 0.8)
n.min(0.8, 0.8)
set.seed(4444)
muA.1 <- 2.7
muA.2 <- 3.4
muB.1 <- 2.5
sd <- 1
n <- 2
power.level <- c(0.8, 0.9)
power <- NULL
t.tests <- seq(0, n)
while (power < power.level[1]){
n <- n + 1
A <- rnorm(n, muA, sd)
B <- rnorm(n, muB, sd)
t.tests[i] <- t.test(A,B)
power <- sum(apply(t.tests, function(x) abs(x)) > CV / n)
while (power < power.level[2]){
n <- n + 1
A <- rnorm(n, muA, sd)
B <- rnorm(n, muB, sd)
t.tests[i] <- t.test(A, B)
power <- sum(apply(t.tests, function(x) abs(x)) > CV / n)
}
}
n <- n + 1
A <- rnorm(n, muA, sd)
B <- rnorm(n, muB, sd)
t.tests[i] <- t.test(A,B)
power <- sum(apply(t.tests, function(x) abs(x)) > CV / n)
N <- 64
muA <- 3
muB <- 2.5
sd <- 1
n <- 100
x <- seq(0, n)
n <- 2
power.level <- c(0.8, 0.9)
power <- NULL
t.tests <- seq(0, n)
power <- 0
t.tests <- seq(0, n)
while (power < power.level[1]){
n <- n + 1
A <- rnorm(n, muA, sd)
B <- rnorm(n, muB, sd)
t.tests[i] <- t.test(A,B)
power <- sum(apply(t.tests, function(x) abs(x)) > CV / n)
while (power < power.level[2]){
n <- n + 1
A <- rnorm(n, muA, sd)
B <- rnorm(n, muB, sd)
t.tests[i] <- t.test(A, B)
power <- sum(apply(t.tests, function(x) abs(x)) > CV / n)
}
}
while (power < power.level[1]){
n <- n + 1
A <- rnorm(n, muA, sd)
B <- rnorm(n, muB, sd)
t.tests[i] <- t.test(A,B)
power <- sum(sapply(t.tests, function(x) abs(x)) > CV / n)
while (power < power.level[2]){
n <- n + 1
A <- rnorm(n, muA, sd)
B <- rnorm(n, muB, sd)
t.tests[i] <- t.test(A, B)
power <- sum(sapply(t.tests, function(x) abs(x)) > CV / n)
}
}
t.tests <- seq(0, n)
n <- n + 1
A <- rnorm(n, muA, sd)
B <- rnorm(n, muB, sd)
t.tests[i] <- t.test(A,B)
t.test(A,B)
class(t.test(A,B))
str(t.test(A,B))
n <- n + 1
A <- rnorm(n, muA, sd)
B <- rnorm(n, muB, sd)
t.tests[i] <- t.test(A,B)$statistic
power <- sum(sapply(t.tests, function(x) abs(x)) > CV / n)
class(t.test(A,B)$statistic)
set.seed(4444)
muA.1 <- 2.7
muA.2 <- 3.4
muB.1 <- 2.5
sd <- 1
n <- 2
power.level <- c(0.8, 0.9)
power <- 0
t.tests <- seq(0, n)
n <- n + 1
A <- rnorm(n, muA, sd)
B <- rnorm(n, muB, sd)
t.tests[i] <- t.test(A,B)$statistic
power <- sum(sapply(t.tests, function(x) abs(x)) > CV / n)
set.seed(4444)
muA.1 <- 2.7
muA.2 <- 3.4
muB.1 <- 2.5
sd <- 1
n <- 2
power.level <- c(0.8, 0.9)
power <- 0
t.tests <- seq(0, n)
while (power < power.level[1]){
n <- n + 1
A <- rnorm(n, muA, sd)
B <- rnorm(n, muB, sd)
t.tests[i] <- t.test(A,B)$statistic
power <- sum(lapply(t.tests, function(x) abs(x)) > CV / n)
while (power < power.level[2]){
n <- n + 1
A <- rnorm(n, muA, sd)
B <- rnorm(n, muB, sd)
t.tests[i] <- t.test(A, B)$statistic
power <- sum(lapply(t.tests, function(x) abs(x)) > CV / n)
}
}
CV <- qt(0.975, df = 2*N - 2)
N <- 64
muA <- 3
muB <- 2.5
sd <- 1
n <- 100
x <- seq(0, n)
test.stat <- function(A, B){
t.test(A, B, var.equal = TRUE)
}
set.seed(4444)
for (i in 1:n){
A <- rnorm(N, muA, sd)
B <- rnorm(N, muB, sd)
x[i] <- as.matrix(test.stat(A,B))
}
CV <- qt(0.975, df = 2*N - 2)
set.seed(4444)
muA.1 <- 2.7
muA.2 <- 3.4
muB.1 <- 2.5
sd <- 1
n <- 2
power.level <- c(0.8, 0.9)
power <- 0
t.tests <- seq(0, n)
while (power < power.level[1]){
n <- n + 1
A <- rnorm(n, muA, sd)
B <- rnorm(n, muB, sd)
t.tests[i] <- t.test(A,B)$statistic
power <- sum(lapply(t.tests, function(x) abs(x)) > CV / n)
while (power < power.level[2]){
n <- n + 1
A <- rnorm(n, muA, sd)
B <- rnorm(n, muB, sd)
t.tests[i] <- t.test(A, B)$statistic
power <- sum(lapply(t.tests, function(x) abs(x)) > CV / n)
}
}
n <- n + 1
A <- rnorm(n, muA, sd)
B <- rnorm(n, muB, sd)
t.tests[i] <- t.test(A,B)$statistic
power <- sum(lapply(t.tests, function(x) abs(x)) > CV / n)
n <- n + 1
A <- rnorm(n, muA, sd)
B <- rnorm(n, muB, sd)
t.tests[i] <- t.test(A,B)$statistic
power <- sum(abs(t.tests) > CV/n)
power
while (power < power.level[1]){
n <- n + 1
A <- rnorm(n, muA, sd)
B <- rnorm(n, muB, sd)
t.tests[i] <- t.test(A,B)$statistic
power <- sum(abs(t.tests) > CV/n)
}
A <- rnorm(n, muA, sd)
B <- rnorm(n, muB, sd)
t.tests[i] <- t.test(A,B)$statistic
summary(t.tests)
t.tests <- numeric()
n <- n + 1
A <- rnorm(n, muA, sd)
B <- rnorm(n, muB, sd)
t.tests[i] <- t.test(A,B)$statistic
t.tests <- numeric()
while (power < power.level[1]){
n <- n + 1
A <- rnorm(n, muA, sd)
B <- rnorm(n, muB, sd)
reject <- reject + (abs(t.test(A,B)$statistic) > CV/n)
# t.tests[i] <- t.test(A,B)$statistic
power <- sum(abs(t.tests) > CV/n)
# power <- sum(lapply(t.tests, function(x) abs(x)) > CV / n)
}
library(faraway)
data("aatemp")
names(aatemp)
plot(temp ~ year)
with(aatemp, plot(temp ~ year))
install.ackages("nlme")
install.packages("nlme")
library(nlme)
g <- gls(temp ~ year, correlation=corAR1(form=year), data=aatemp)
g <- gls(temp ~ year, correlation=corAR1(form= year), data=aatemp)
names(aatemp)
g <- gls(temp  year, correlation=corAR1(form= year), data=aatemp)
g <- gls(temp ~ year, correlation=corAR1(form= ~ year), data=aatemp)
summary(g)
abline(lm(temp ~ year, data=aatemp))
lm0 <- lm(temp ~ year + I(year^2) + I(year^3) + I(year^3) + I(year^4) +
I(year^5) + I(year^6) + I(year^7) + I(year^8) + I(year^9)
I(year^10))
lm0 <- lm(temp ~ year + I(year^2) + I(year^3) + I(year^3) + I(year^4) +
I(year^5) + I(year^6) + I(year^7) + I(year^8) + I(year^9) +
I(year^10))
lm0 <- lm(temp ~ year + I(year^2) + I(year^3) + I(year^3) + I(year^4) +
I(year^5) + I(year^6) + I(year^7) + I(year^8) + I(year^9) +
I(year^10), data=aatemp)
summary(lm0)
poly(year, 10)
lm0 <- lm(temp ~ poly(year, 10), data=aatemp)
summary(lm0)
funky <- function(x) sin(2*pi*x^3)^3
x <- seq(0,1,by=0.01)
y <- funky(x) + 0.1*rnorm(101
)
matplot(x,cbind(y,funky(x)),type="pl",ylab="y",pch=18,lty=1, main="True Model"
)
?matplot
matplot(x,funky(x),type="pl",ylab="y",pch=18,lty=1, main="True Model")
matplot(x,y,type="pl",ylab="y",pch=18,lty=1, main="True Model")
lm1 <- lm(temp ~ poly(year, 5), data=aatemp)
lm1
summary(lm1)
summary(lm0)
with(aatemp, plot(fitted(lm1) ~ year))
with(aatemp, plot(temp ~ year))
with(aatemp, lines(fitted(lm1) ~ year))
with(aatemp, abline(lm0))
with(aatemp, abline(lm(temp ~ year)))
with(aatemp, lines(fitted(lm1) ~ year, col="green"))
with(aatemp, abline(lm(temp ~ year), col="red"))
with(aatemp, lines(fitted(lm1) ~ year, col="blue"))
with(aatemp, abline(lm(temp ~ year), col="red"))
matplot(x,cbind(y,funky(x)),type="pl",ylab="y",pch=18,lty=1, main="True Model")
g4 <- lm(y ~ poly(x,4))
g12 <- lm(y ~ poly(x,12))
matplot(x,cbind(y,g4$fit,g12$fit),type="pll",ylab="y",pch=18, lty=c(1,2),main="Orthogonal Polynomials"
)
head(x)
library(splines)
knots <- c(0,0,0,0,0.2,0.4,0.5,0.6,0.7,0.8,0.85,0.9,1,1,1,1)
bx <- splineDesign(knots,x) # partition x vector into knots
gs <- lm(y ~ bx)
matplot(x,bx,type="l",main="B-spline basis functions")
matplot(x,cbind(y,gs$fit),type="pl",ylab="y",pch=18,lty=1, main="Spline fit")
matplot(x,bx,type="l",main="B-spline basis functions")
head(bx)
matplot(x,x,type="l",main="B-spline basis functions")
matplot(x,bx[,2],type="l",main="B-spline basis functions")
matplot(x,bx[1,2],type="l",main="B-spline basis functions")
matplot(x,bx[,c(1,2)],type="l",main="B-spline basis functions")
matplot(x,bx,type="l",main="B-spline basis functions")
matplot(x,bx[, 1],type="l",main="B-spline basis functions")
matplot(x,bx[, 7],type="l",main="B-spline basis functions")
matplot(x,bx[, 2],type="l",main="B-spline basis functions")
matplot(x,bx[, 3],type="l",main="B-spline basis functions")
tailbx
tail(bx)
y2020 <- data.frame(year=2020)
predict(lm1, y2020)
rhs <- function(x) ifelse(x < 1930, 0, x - 1930)
brockenstick <- lm(temp ~ rhs(year), data=aatemp)
lines(stickpred ~ x, col="green")
summary(brokenstick)
brokenstick <- lm(temp ~ rhs(year), data=aatemp)
summary(brokenstick)
xx <- 1854:2000
stickpred <- brokenstick$coefficients[1] + brokenstick$coefficients[2]*rhs(xx)
lines(stickpred ~ XX)
lines(stickpred ~ xx)
with(aatemp, plot(temp ~ year))
with(aatemp, lines(fitted(lm1) ~ year, col="blue"))
with(aatemp, abline(lm(temp ~ year), col="red"))
lines(stickpred ~ xx)
rm(list=ls())
setwd("C:/Users/Tomas/Documents/LEI/data/TZA/TZNPS2COMDTA")
pol <- read_dta("COMSEC_CI.dta") %>%
select(region=id_01,
district=id_02,
ward=id_03,
position=cm_i01,
sex=cm_i02,
resident=cm_i05,
party=cm_i06,
village=cm_i07,
religion=cm_i10)
library(dplyr)
setwd("C:/Users/Tomas/Documents/LEI/data/TZA/TZNPS2COMDTA")
pol <- read_dta("COMSEC_CI.dta") %>%
select(region=id_01,
district=id_02,
ward=id_03,
position=cm_i01,
sex=cm_i02,
resident=cm_i05,
party=cm_i06,
village=cm_i07,
religion=cm_i10)
library(haven)
setwd("C:/Users/Tomas/Documents/LEI/data/TZA/TZNPS2COMDTA")
pol <- read_dta("COMSEC_CI.dta") %>%
select(region=id_01,
district=id_02,
ward=id_03,
position=cm_i01,
sex=cm_i02,
resident=cm_i05,
party=cm_i06,
village=cm_i07,
religion=cm_i10)
pol$position <- as_factor(pol$position)
pol$sex <- as_factor(pol$sex)
pol$party <- as_factor(pol$party)
pol$religion <- ifelse(pol$religion %in% 1, "TDL", ifelse(pol$religion %in% 2, "CHRSTN", ifelse(pol$religion %in% 3, "MSLM", "OTHR")))
pol$region <- unclass(pol$region)
head(pol)
vouch1 <- read_dta("C:/Users/Tomas/Documents/LEI/data/TZA/TZNPS2AGRDTA/AG_SEC3A.dta") %>%
dplyr::select(y2_hhid, vouch1=ag3a_48, vouch2=ag3a_55)
vouch1$vouch1 <- ifelse(vouch1$vouch1 %in% 2, 0, vouch1$vouch1)
vouch1$vouch2 <- ifelse(vouch1$vouch2 %in% 2, 0, vouch1$vouch2)
vouch1 <- melt(vouch1, id.vars="y2_hhid") %>% unique
vouch1 <- ddply(vouch1, .(y2_hhid), summarise, v10=sum(value %in% 1))
library(plyr)
vouch1 <- read_dta("C:/Users/Tomas/Documents/LEI/data/TZA/TZNPS2AGRDTA/AG_SEC3A.dta") %>%
dplyr::select(y2_hhid, vouch1=ag3a_48, vouch2=ag3a_55)
vouch1$vouch1 <- ifelse(vouch1$vouch1 %in% 2, 0, vouch1$vouch1)
vouch1$vouch2 <- ifelse(vouch1$vouch2 %in% 2, 0, vouch1$vouch2)
vouch1 <- melt(vouch1, id.vars="y2_hhid") %>% unique
vouch1 <- ddply(vouch1, .(y2_hhid), summarise, v10=sum(value %in% 1))
library(reshape2)
vouch1 <- read_dta("C:/Users/Tomas/Documents/LEI/data/TZA/TZNPS2AGRDTA/AG_SEC3A.dta") %>%
dplyr::select(y2_hhid, vouch1=ag3a_48, vouch2=ag3a_55)
vouch1$vouch1 <- ifelse(vouch1$vouch1 %in% 2, 0, vouch1$vouch1)
vouch1$vouch2 <- ifelse(vouch1$vouch2 %in% 2, 0, vouch1$vouch2)
vouch1 <- melt(vouch1, id.vars="y2_hhid") %>% unique
vouch1 <- ddply(vouch1, .(y2_hhid), summarise, v10=sum(value %in% 1))
summary(vouch1)
head(vouch1)
tail(vouch1)
setwd("C:/Users/Tomas/Documents/LEI/pol/data/2012 Wards Shapefiles")
library(rgdal)
TZA <- readOGR("TZwards.shp", layer="TZwards")
plot(TZA)
ward_link1 <- read_dta("C:/Users/Tomas/Documents/LEI/data/TZA/HH_SEC_A.dta") %>%
dplyr::select(y2_hhid, region, district, ward)
head(ward_link1)
sum(vouch1$v10 > 0)
189/2630
